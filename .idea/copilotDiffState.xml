<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/components/chat/ChatMessage.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/chat/ChatMessage.tsx" />
              <option name="originalContent" value="import React, { useEffect, useState } from 'react';&#10;import { Image, StyleSheet, Text, TouchableOpacity, View } from 'react-native';&#10;import FontAwesome from 'react-native-vector-icons/FontAwesome';&#10;import { ChatMessage as ChatMessageType } from './types';&#10;import Clipboard from '@react-native-clipboard/clipboard';&#10;&#10;interface ChatMessageProps {&#10;  message: ChatMessageType;&#10;  isStreaming?: boolean;&#10;  isThinking?: boolean;&#10;  onPlayVoiceMessage: (audioUri: string) =&gt; void;&#10;  onPlayAiAudio: (text: string) =&gt; void;&#10;  animatePerChar?: boolean;&#10;}&#10;&#10;export default function ChatMessage({&#10;  message,&#10;  isStreaming = false,&#10;  isThinking = false,&#10;  onPlayVoiceMessage,&#10;  onPlayAiAudio,&#10;  animatePerChar = false,&#10;}: ChatMessageProps) {&#10;  // Copy to clipboard handler&#10;  const handleCopy = () =&gt; {&#10;    Clipboard.setString(message.text);&#10;  };&#10;&#10;  // Animated text state for per-character animation&#10;  const [displayedText, setDisplayedText] = useState(animatePerChar ? '' : message.text);&#10;  const prevTextRef = React.useRef('');&#10;&#10;  useEffect(() =&gt; {&#10;    if (!animatePerChar) {&#10;      setDisplayedText(message.text);&#10;      prevTextRef.current = message.text;&#10;      return;&#10;    }&#10;    const prev = prevTextRef.current;&#10;    // Only animate if new text is longer and starts with previous&#10;    if (message.text.startsWith(prev) &amp;&amp; message.text.length &gt; prev.length) {&#10;      const chars = Array.from(message.text.slice(prev.length));&#10;      let i = 0;&#10;      function showNextChar() {&#10;        setDisplayedText(prev + chars.slice(0, i + 1).join(''));&#10;        if (i &lt; chars.length - 1) {&#10;          i++;&#10;          setTimeout(showNextChar, 24);&#10;        } else {&#10;          prevTextRef.current = message.text;&#10;        }&#10;      }&#10;      if (chars.length &gt; 0) showNextChar();&#10;    } else if (message.text.length &lt;= prev.length || !message.text.startsWith(prev)) {&#10;      // Only set immediately if text was replaced or shortened or finalized&#10;      setDisplayedText(message.text);&#10;      prevTextRef.current = message.text;&#10;    }&#10;    // eslint-disable-next-line&#10;  }, [message.text, animatePerChar]);&#10;&#10;  return (&#10;    &lt;View&#10;      style={[&#10;        styles.messageRow,&#10;        message.sender === 'user' ? styles.rowRight : styles.rowLeft,&#10;      ]}&#10;    &gt;&#10;      {/* Show action buttons on the empty side */}&#10;      {message.sender === 'user' &amp;&amp; (&#10;        &lt;View style={styles.actionColumn}&gt;&#10;          {message.audioUri &amp;&amp; !isStreaming &amp;&amp; (&#10;            &lt;TouchableOpacity&#10;              style={styles.voicePlayButton}&#10;              onPress={() =&gt; onPlayVoiceMessage(message.audioUri!)}&#10;            &gt;&#10;              &lt;FontAwesome name=&quot;play&quot; size={20} color=&quot;#007AFF&quot; /&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          )}&#10;          {!message.audioUri &amp;&amp; !isStreaming &amp;&amp; (&#10;            &lt;TouchableOpacity&#10;              onPress={handleCopy}&#10;              style={styles.iconButton}&#10;              accessibilityLabel=&quot;Copy to clipboard&quot;&#10;            &gt;&#10;              &lt;FontAwesome name=&quot;copy&quot; size={20} color=&quot;#888&quot; /&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          )}&#10;        &lt;/View&gt;&#10;      )}&#10;      {/* Message bubble and content */}&#10;      &lt;View&#10;        style={[&#10;          styles.messageBubble,&#10;          message.sender === 'user' ? styles.userBubble : styles.aiBubble,&#10;        ]}&#10;      &gt;&#10;        {message.imageUrl &amp;&amp; (&#10;          &lt;Image&#10;            source={{ uri: message.imageUrl }}&#10;            style={styles.messageImage}&#10;            resizeMode=&quot;cover&quot;&#10;            onError={e =&gt; console.log('Image Error:', e.nativeEvent.error)}&#10;          /&gt;&#10;        )}&#10;        {message.attachedImageUrl &amp;&amp; (&#10;          &lt;Image&#10;            source={{ uri: message.attachedImageUrl }}&#10;            style={styles.messageImage}&#10;            resizeMode=&quot;cover&quot;&#10;            onError={e =&gt; console.log('Attached Image Error:', e.nativeEvent.error)}&#10;          /&gt;&#10;        )}&#10;        {message.audioUri ? (&#10;          &lt;Text style={styles.voiceMessageText}&gt;Voice message&lt;/Text&gt;&#10;        ) : (&#10;          &lt;Text selectable style={styles.messageText}&gt;&#10;            {animatePerChar ? displayedText : message.text}&#10;          &lt;/Text&gt;&#10;        )}&#10;        &lt;View style={styles.messageFooter}&gt;&#10;          &lt;Text style={styles.timestamp}&gt;{message.timestamp}&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;      &lt;/View&gt;&#10;      {/* Show action buttons for system messages on the right */}&#10;      {message.sender === 'system' &amp;&amp; (&#10;        &lt;View style={styles.actionColumn}&gt;&#10;          {message.audioUri &amp;&amp; !isStreaming &amp;&amp; (&#10;            &lt;TouchableOpacity&#10;              style={styles.voicePlayButton}&#10;              onPress={() =&gt; onPlayVoiceMessage(message.audioUri!)}&#10;            &gt;&#10;              &lt;FontAwesome name=&quot;play&quot; size={20} color=&quot;#007AFF&quot; /&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          )}&#10;          {!message.audioUri &amp;&amp; !isStreaming &amp;&amp; (&#10;            &lt;TouchableOpacity&#10;              onPress={handleCopy}&#10;              style={styles.iconButton}&#10;              accessibilityLabel=&quot;Copy to clipboard&quot;&#10;            &gt;&#10;              &lt;FontAwesome name=&quot;copy&quot; size={20} color=&quot;#888&quot; /&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          )}&#10;          {/* Play TTS for AI text */}&#10;          {message.sender === 'system' &amp;&amp; !isStreaming &amp;&amp; !isThinking &amp;&amp; (&#10;            &lt;TouchableOpacity&#10;              style={styles.iconButton}&#10;              onPress={() =&gt; onPlayAiAudio(message.text)}&#10;            &gt;&#10;              &lt;FontAwesome name=&quot;volume-up&quot; size={20} color=&quot;#666&quot; /&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          )}&#10;        &lt;/View&gt;&#10;      )}&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  messageRow: {&#10;    flexDirection: 'row',&#10;    alignItems: 'flex-end',&#10;    marginBottom: 10,&#10;    width: '100%',&#10;  },&#10;  rowLeft: {&#10;    justifyContent: 'flex-start',&#10;  },&#10;  rowRight: {&#10;    justifyContent: 'flex-end',&#10;  },&#10;  actionColumn: {&#10;    justifyContent: 'flex-end',&#10;    alignItems: 'center',&#10;    minWidth: 36,&#10;    marginHorizontal: 2,&#10;    gap: 8,&#10;  },&#10;  iconButton: {&#10;    padding: 4,&#10;  },&#10;  messageBubble: {&#10;    maxWidth: '80%',&#10;    padding: 12,&#10;    borderRadius: 15,&#10;    marginBottom: 10,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 1 },&#10;    shadowOpacity: 0.05,&#10;    shadowRadius: 2,&#10;    elevation: 1,&#10;    flexDirection: 'column',&#10;    alignItems: 'flex-start',&#10;  },&#10;  userBubble: {&#10;    alignSelf: 'flex-end',&#10;    backgroundColor: '#f1ecf1',&#10;  },&#10;  aiBubble: {&#10;    alignSelf: 'flex-start',&#10;    backgroundColor: '#fff',&#10;  },&#10;  messageText: {&#10;    fontSize: 16,&#10;    color: '#333',&#10;  },&#10;  messageImage: {&#10;    width: 150,&#10;    height: 150,&#10;    borderRadius: 10,&#10;    marginBottom: 10,&#10;  },&#10;  messageFooter: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    justifyContent: 'flex-end',&#10;    width: '100%',&#10;    marginTop: 5,&#10;  },&#10;  playButton: {&#10;    padding: 5,&#10;    borderRadius: 15,&#10;    backgroundColor: '#e0e0e0',&#10;  },&#10;  playButtonIcon: {&#10;    fontSize: 16,&#10;    color: '#007AFF',&#10;  },&#10;  timestamp: {&#10;    fontSize: 10,&#10;    color: '#777',&#10;    alignSelf: 'flex-end',&#10;    marginLeft: 8,&#10;  },&#10;  voiceMessageContainer: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    backgroundColor: '#f0f4f8',&#10;    borderRadius: 20,&#10;    padding: 10,&#10;    minWidth: 120,&#10;  },&#10;  voicePlayButton: {&#10;    backgroundColor: '#e0eaff',&#10;    borderRadius: 20,&#10;    width: 40,&#10;    height: 40,&#10;    justifyContent: 'center',&#10;    alignItems: 'center',&#10;    marginRight: 10,&#10;  },&#10;  voiceMessageText: {&#10;    fontSize: 14,&#10;    color: '#666',&#10;    fontStyle: 'italic',&#10;  },&#10;});" />
              <option name="updatedContent" value="import React, { useEffect, useState } from 'react';&#10;import { Image, StyleSheet, Text, TouchableOpacity, View } from 'react-native';&#10;import FontAwesome from 'react-native-vector-icons/FontAwesome';&#10;import { ChatMessage as ChatMessageType } from './types';&#10;import Clipboard from '@react-native-clipboard/clipboard';&#10;&#10;interface ChatMessageProps {&#10;  message: ChatMessageType;&#10;  isStreaming?: boolean;&#10;  isThinking?: boolean;&#10;  onPlayVoiceMessage: (audioUri: string) =&gt; void;&#10;  onPlayAiAudio: (text: string) =&gt; void;&#10;  animatePerChar?: boolean;&#10;}&#10;&#10;export default function ChatMessage({&#10;  message,&#10;  isStreaming = false,&#10;  isThinking = false,&#10;  onPlayVoiceMessage,&#10;  onPlayAiAudio,&#10;  animatePerChar = false,&#10;}: ChatMessageProps) {&#10;  // Copy to clipboard handler&#10;  const handleCopy = () =&gt; {&#10;    Clipboard.setString(message.text);&#10;  };&#10;&#10;  // Animated text state for per-character animation&#10;  const [displayedText, setDisplayedText] = useState(animatePerChar ? '' : message.text);&#10;  const prevTextRef = React.useRef('');&#10;&#10;  useEffect(() =&gt; {&#10;    if (!animatePerChar) {&#10;      setDisplayedText(message.text);&#10;      prevTextRef.current = message.text;&#10;      return;&#10;    }&#10;    // Only animate new characters appended to the message&#10;    const prev = prevTextRef.current;&#10;    if (&#10;      message.text.startsWith(prev) &amp;&amp;&#10;      message.text.length &gt; prev.length&#10;    ) {&#10;      // Animate only the new characters&#10;      const newChars = message.text.slice(prev.length);&#10;      let i = 0;&#10;      const interval = setInterval(() =&gt; {&#10;        setDisplayedText((current) =&gt; {&#10;          const next = prev + newChars.slice(0, i + 1);&#10;          return next;&#10;        });&#10;        i++;&#10;        if (i &gt;= newChars.length) {&#10;          clearInterval(interval);&#10;          prevTextRef.current = message.text;&#10;        }&#10;      }, 18); // ~55 chars/sec&#10;      return () =&gt; clearInterval(interval);&#10;    } else if (&#10;      message.text.length &lt; prev.length ||&#10;      !message.text.startsWith(prev)&#10;    ) {&#10;      // If message changed in a non-append way, just set it&#10;      setDisplayedText(message.text);&#10;      prevTextRef.current = message.text;&#10;    }&#10;  }, [message.text, animatePerChar]);&#10;&#10;  return (&#10;    &lt;View&#10;      style={[&#10;        styles.messageRow,&#10;        message.sender === 'user' ? styles.rowRight : styles.rowLeft,&#10;      ]}&#10;    &gt;&#10;      {/* Show action buttons on the empty side */}&#10;      {message.sender === 'user' &amp;&amp; (&#10;        &lt;View style={styles.actionColumn}&gt;&#10;          {message.audioUri &amp;&amp; !isStreaming &amp;&amp; (&#10;            &lt;TouchableOpacity&#10;              style={styles.voicePlayButton}&#10;              onPress={() =&gt; onPlayVoiceMessage(message.audioUri!)}&#10;            &gt;&#10;              &lt;FontAwesome name=&quot;play&quot; size={20} color=&quot;#007AFF&quot; /&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          )}&#10;          {!message.audioUri &amp;&amp; !isStreaming &amp;&amp; (&#10;            &lt;TouchableOpacity&#10;              onPress={handleCopy}&#10;              style={styles.iconButton}&#10;              accessibilityLabel=&quot;Copy to clipboard&quot;&#10;            &gt;&#10;              &lt;FontAwesome name=&quot;copy&quot; size={20} color=&quot;#888&quot; /&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          )}&#10;        &lt;/View&gt;&#10;      )}&#10;      {/* Message bubble and content */}&#10;      &lt;View&#10;        style={[&#10;          styles.messageBubble,&#10;          message.sender === 'user' ? styles.userBubble : styles.aiBubble,&#10;        ]}&#10;      &gt;&#10;        {message.imageUrl &amp;&amp; (&#10;          &lt;Image&#10;            source={{ uri: message.imageUrl }}&#10;            style={styles.messageImage}&#10;            resizeMode=&quot;cover&quot;&#10;            onError={e =&gt; console.log('Image Error:', e.nativeEvent.error)}&#10;          /&gt;&#10;        )}&#10;        {message.attachedImageUrl &amp;&amp; (&#10;          &lt;Image&#10;            source={{ uri: message.attachedImageUrl }}&#10;            style={styles.messageImage}&#10;            resizeMode=&quot;cover&quot;&#10;            onError={e =&gt; console.log('Attached Image Error:', e.nativeEvent.error)}&#10;          /&gt;&#10;        )}&#10;        {message.audioUri ? (&#10;          &lt;Text style={styles.voiceMessageText}&gt;Voice message&lt;/Text&gt;&#10;        ) : (&#10;          &lt;Text selectable style={styles.messageText}&gt;&#10;            {animatePerChar ? displayedText : message.text}&#10;          &lt;/Text&gt;&#10;        )}&#10;        &lt;View style={styles.messageFooter}&gt;&#10;          &lt;Text style={styles.timestamp}&gt;{message.timestamp}&lt;/Text&gt;&#10;        &lt;/View&gt;&#10;      &lt;/View&gt;&#10;      {/* Show action buttons for system messages on the right */}&#10;      {message.sender === 'system' &amp;&amp; (&#10;        &lt;View style={styles.actionColumn}&gt;&#10;          {message.audioUri &amp;&amp; !isStreaming &amp;&amp; (&#10;            &lt;TouchableOpacity&#10;              style={styles.voicePlayButton}&#10;              onPress={() =&gt; onPlayVoiceMessage(message.audioUri!)}&#10;            &gt;&#10;              &lt;FontAwesome name=&quot;play&quot; size={20} color=&quot;#007AFF&quot; /&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          )}&#10;          {!message.audioUri &amp;&amp; !isStreaming &amp;&amp; (&#10;            &lt;TouchableOpacity&#10;              onPress={handleCopy}&#10;              style={styles.iconButton}&#10;              accessibilityLabel=&quot;Copy to clipboard&quot;&#10;            &gt;&#10;              &lt;FontAwesome name=&quot;copy&quot; size={20} color=&quot;#888&quot; /&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          )}&#10;          {/* Play TTS for AI text */}&#10;          {message.sender === 'system' &amp;&amp; !isStreaming &amp;&amp; !isThinking &amp;&amp; (&#10;            &lt;TouchableOpacity&#10;              style={styles.iconButton}&#10;              onPress={() =&gt; onPlayAiAudio(message.text)}&#10;            &gt;&#10;              &lt;FontAwesome name=&quot;volume-up&quot; size={20} color=&quot;#666&quot; /&gt;&#10;            &lt;/TouchableOpacity&gt;&#10;          )}&#10;        &lt;/View&gt;&#10;      )}&#10;    &lt;/View&gt;&#10;  );&#10;}&#10;&#10;const styles = StyleSheet.create({&#10;  messageRow: {&#10;    flexDirection: 'row',&#10;    alignItems: 'flex-end',&#10;    marginBottom: 10,&#10;    width: '100%',&#10;  },&#10;  rowLeft: {&#10;    justifyContent: 'flex-start',&#10;  },&#10;  rowRight: {&#10;    justifyContent: 'flex-end',&#10;  },&#10;  actionColumn: {&#10;    justifyContent: 'flex-end',&#10;    alignItems: 'center',&#10;    minWidth: 36,&#10;    marginHorizontal: 2,&#10;    gap: 8,&#10;  },&#10;  iconButton: {&#10;    padding: 4,&#10;  },&#10;  messageBubble: {&#10;    maxWidth: '80%',&#10;    padding: 12,&#10;    borderRadius: 15,&#10;    marginBottom: 10,&#10;    shadowColor: '#000',&#10;    shadowOffset: { width: 0, height: 1 },&#10;    shadowOpacity: 0.05,&#10;    shadowRadius: 2,&#10;    elevation: 1,&#10;    flexDirection: 'column',&#10;    alignItems: 'flex-start',&#10;  },&#10;  userBubble: {&#10;    alignSelf: 'flex-end',&#10;    backgroundColor: '#f1ecf1',&#10;  },&#10;  aiBubble: {&#10;    alignSelf: 'flex-start',&#10;    backgroundColor: '#fff',&#10;  },&#10;  messageText: {&#10;    fontSize: 16,&#10;    color: '#333',&#10;  },&#10;  messageImage: {&#10;    width: 150,&#10;    height: 150,&#10;    borderRadius: 10,&#10;    marginBottom: 10,&#10;  },&#10;  messageFooter: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    justifyContent: 'flex-end',&#10;    width: '100%',&#10;    marginTop: 5,&#10;  },&#10;  playButton: {&#10;    padding: 5,&#10;    borderRadius: 15,&#10;    backgroundColor: '#e0e0e0',&#10;  },&#10;  playButtonIcon: {&#10;    fontSize: 16,&#10;    color: '#007AFF',&#10;  },&#10;  timestamp: {&#10;    fontSize: 10,&#10;    color: '#777',&#10;    alignSelf: 'flex-end',&#10;    marginLeft: 8,&#10;  },&#10;  voiceMessageContainer: {&#10;    flexDirection: 'row',&#10;    alignItems: 'center',&#10;    backgroundColor: '#f0f4f8',&#10;    borderRadius: 20,&#10;    padding: 10,&#10;    minWidth: 120,&#10;  },&#10;  voicePlayButton: {&#10;    backgroundColor: '#e0eaff',&#10;    borderRadius: 20,&#10;    width: 40,&#10;    height: 40,&#10;    justifyContent: 'center',&#10;    alignItems: 'center',&#10;    marginRight: 10,&#10;  },&#10;  voiceMessageText: {&#10;    fontSize: 14,&#10;    color: '#666',&#10;    fontStyle: 'italic',&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>